using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using com.vrcfury.api;
using UnityEditor;
using UnityEditor.Animations;
using UnityEngine;
using UnityEditor.PackageManager;
using VF;
using VF.Component;
using VF.Model;
using VF.Model.Feature;
using VF.Model.StateAction;
using VF.Utils;
using Object = UnityEngine.Object;
using PackageInfo = UnityEditor.PackageManager.PackageInfo;

namespace Wholesome
{
    public class SFX
    {
        private const string SourcePackage = "wholesomevr.sps-configurator";
        private const string SourcePath = "Packages/" + SourcePackage + "/Assets/SFX/";
        private const string DestinationPath = "Assets/!Wholesome/SPS Configurator/";

        private static string GetPackageVersion()
        {
            var packageInfo = PackageInfo.FindForAssetPath("Packages/" + SourcePackage);
            return packageInfo.version;
        }

        private static string CopyAssets()
        {
            string packageVersion = GetPackageVersion();
            string fullDestPath = DestinationPath + packageVersion + "/SFX/";
            var assetPaths = AssetDatabase.FindAssets("", new[] { SourcePath })
                .Select(AssetDatabase.GUIDToAssetPath).ToArray();
            var prefabPath = Path.Join(fullDestPath, "SFX.prefab");

            var prefabExists = File.Exists(prefabPath);
            
            foreach (var path in assetPaths)
            {
                string relativePath = path.Substring(SourcePath.Length);
                string destFilePath = fullDestPath + relativePath;
                if (!File.Exists(destFilePath))
                {
                    Directory.CreateDirectory(Path.GetDirectoryName(destFilePath));
                    AssetDatabase.CopyAsset(path, destFilePath);
                }
            }
            var prefab = PrefabUtility.LoadPrefabContents(prefabPath);
            
            // Prefab was newly created, need to add Full Controller and change audio clips
            if (!prefabExists)
            {
                var fx = AssetDatabase.LoadAllAssetsAtPath(Path.Join(fullDestPath, "AAC_SFX.controller"))
                    .FirstOrDefault(a => a.name == "zAutogenerated__WH__SFX_107040187");
                var ctr = FuryComponents.CreateFullController(prefab);
                ctr.AddController(fx as RuntimeAnimatorController);
                ctr.AddGlobalParam("WH_SFX_Depth");
                ctr.AddGlobalParam("WH_SFX_On");
            
                foreach (var audioSource in prefab.GetComponentsInChildren<AudioSource>(true))
                {
                    var clipPath = AssetDatabase.GetAssetPath(audioSource.clip);
                    var newClipPath = fullDestPath + clipPath.Substring(SourcePath.Length);
                    audioSource.clip = AssetDatabase.LoadAssetAtPath<AudioClip>(newClipPath);
                }
                PrefabUtility.SaveAsPrefabAsset(prefab, prefabPath);
                PrefabUtility.UnloadPrefabContents(prefab);
            }
            AssetDatabase.Refresh();
            return prefabPath;
        }

        public static void Apply(Transform socketTransform)
        {
            var path = CopyAssets();
            var sfxPrefab = AssetDatabase.LoadAssetAtPath<GameObject>(path);
            var socket = socketTransform.GetComponent<VRCFuryHapticSocket>();
            var sfx = ((GameObject)PrefabUtility.InstantiatePrefab(sfxPrefab, socketTransform)).transform;
            socket.enableDepthAnimations = true;
            var fxState = new State();
            fxState.actions.Add(new FxFloatAction()
            {
                name = "WH_SFX_Depth"
            });
            socket.depthActions.Add(new VRCFuryHapticSocket.DepthAction
            {
                state = fxState,
                enableSelf = true,
                startDistance = 0,
                endDistance = -0.5f,
                smoothingSeconds = 0,
            });

            socket.enableActiveAnimation = true;
            socket.activeActions = new State();
            socket.activeActions.actions.Add(new ObjectToggleAction
            {
                obj = sfx.gameObject
            });
        }

        public static void AddToggle(GameObject spsObject)
        {
            // TODO: Add API to VRCF
            // var toggle = FuryComponents.CreateToggle(spsObject);
            // toggle.SetDefaultOn();
            // toggle.SetSaved(); 
            // toggle.SetGlobalParam("WH_SFX_On");
            var fury = spsObject.AddComponent<VRCFury>();
            fury.Version = 3;
            fury.content = new Toggle()
            {
                name = "SPS/Options/Sound FX",
                saved = true,
                defaultOn = true,
                useGlobalParam = true,
                globalParam = "WH_SFX_On"
            };
        }
    }
}